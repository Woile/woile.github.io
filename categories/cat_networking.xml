<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog (Posts about networking)</title><link>https://woile.github.io/</link><description></description><atom:link href="https://woile.github.io/categories/cat_networking.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 11 Feb 2019 08:45:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Websockets RFC summary</title><link>https://woile.github.io/posts/websockets-rfc-summary/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://tools.ietf.org/html/rfc6455.html"&gt;RFC&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;For bi-directional communication (e.g., instant messaging and gaming applications): abuse of &lt;strong&gt;HTTP poll&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="problems"&gt;
&lt;h3&gt;Problems&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mutiple TCP connections. One for sending information and a new one for each incoming message.&lt;/li&gt;
&lt;li&gt;each client-to-server message having an HTTP header.&lt;/li&gt;
&lt;li&gt;the client-side script is forced to maintain a mapping from the outgoing connections to the incoming connection to track replies&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;WebSocket Protocol&lt;/strong&gt; uses a single TCP connection for traffic in both directions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="features"&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;works over HTTP ports 80 and 443&lt;/li&gt;
&lt;li&gt;support for HTTP proxies and intermediaries&lt;/li&gt;
&lt;li&gt;design does not limit WebSocket to HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Protocol has 2 parts: &lt;strong&gt;handshake&lt;/strong&gt; &amp;amp; &lt;strong&gt;data transfer&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="handshake"&gt;
&lt;h3&gt;Handshake&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;client&lt;/strong&gt; handshake example&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Origin: http://example.com
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;server&lt;/strong&gt; handshake example&lt;/p&gt;
&lt;pre class="literal-block"&gt;
HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
Sec-WebSocket-Protocol: chat
&lt;/pre&gt;
&lt;p&gt;An unordered set of header fields comes after the leading line in both cases.
Additional header fields may also be present, such as cookies.&lt;/p&gt;
&lt;p&gt;After a successful handshake, clients and servers transfer data back and forth in
conceptual units referred as &lt;strong&gt;"messages"&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="opening-handshake"&gt;
&lt;h4&gt;Opening Handshake&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;compatible with HTTP-based server-side&lt;/li&gt;
&lt;li&gt;handshake from server includes header with the status code &lt;strong&gt;101&lt;/strong&gt;, otherwise handshake has not completed and that the semantics of HTTP still apply&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design-philosophy"&gt;
&lt;h3&gt;Design philosophy&lt;/h3&gt;
&lt;p&gt;The WebSocket Protocol is designed on the principle that there should
be minimal framing (the only framing that exists is to make the
protocol frame-based instead of stream-based and to support a
distinction between Unicode text and binary frames).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="relationship-to-tcp-and-http"&gt;
&lt;h3&gt;Relationship to TCP and HTTP&lt;/h3&gt;
&lt;p&gt;The WebSocket Protocol is an independent TCP-based protocol.  Its
only relationship to HTTP is that its handshake is interpreted by
HTTP servers as an Upgrade request.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="websocket-uris"&gt;
&lt;h2&gt;WebSocket URIs&lt;/h2&gt;
&lt;p&gt;two URI schemes (insecure &amp;amp; secure)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ws-URI = "ws:" "//" host [ ":" port ] path [ "?" query ]
wss-URI = "wss:" "//" host [ ":" port ] path [ "?" query ]
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;port component is OPTIONAL&lt;/li&gt;
&lt;li&gt;default for "ws" is port 80,&lt;/li&gt;
&lt;li&gt;default for "wss" is port 443.&lt;/li&gt;
&lt;li&gt;fragment identifiers (#) are meaningless in the context of WebSocket URIs and MUST NOT be used on these URIs, escape them using %23 if needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="data-framing"&gt;
&lt;h2&gt;Data Framing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;client &lt;strong&gt;MUST&lt;/strong&gt; mask all frames that it sends to the server&lt;/li&gt;
&lt;li&gt;server &lt;strong&gt;MUST&lt;/strong&gt; close the connection upon receiving a frame that is not masked.&lt;/li&gt;
&lt;li&gt;server &lt;strong&gt;MAY&lt;/strong&gt; use the status code 1002 to close connection&lt;/li&gt;
&lt;li&gt;server &lt;strong&gt;MUST NOT&lt;/strong&gt; mask any frames that it sends to the client.&lt;/li&gt;
&lt;li&gt;client &lt;strong&gt;MUST&lt;/strong&gt; close a connection if it detects a masked frame.&lt;/li&gt;
&lt;li&gt;client &lt;strong&gt;MAY&lt;/strong&gt; use the status code 1002 to close connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>rfc summary websockets</category><guid>https://woile.github.io/posts/websockets-rfc-summary/</guid><pubDate>Fri, 28 Sep 2018 17:16:24 GMT</pubDate></item></channel></rss>