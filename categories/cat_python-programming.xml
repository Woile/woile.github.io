<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog (Posts about python programming)</title><link>https://woile.github.io/</link><description></description><atom:link href="https://woile.github.io/categories/cat_python-programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 15 Sep 2018 13:06:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Writing a dreamt cli with python's decli</title><link>https://woile.github.io/posts/creating-a-small-git-like-cli-with-decli/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;So for a long time I've been using different cli tools, mostly &lt;code&gt;argparse&lt;/code&gt; because this way I had zero dependencies, less worries.&lt;/p&gt;
&lt;p&gt;Other tools such as click or docopt, the way the code must be written, is not something I'm really fond of.&lt;/p&gt;
&lt;p&gt;Because of this, I created &lt;code&gt;decli&lt;/code&gt;, which is a declarative command line utility. Super simple.
Which is basically a wrapper around argparse.
Just write a dict and you are ready to go.&lt;/p&gt;
&lt;p&gt;In this tutorial we are gonna try to simulate a &lt;em&gt;git command line tool&lt;/em&gt;.
Let's create a few commands which will just print a message.&lt;/p&gt;
&lt;p&gt;But we are gonna structure the code, the way I always wanted to hehe.&lt;/p&gt;
&lt;p&gt;The commands will be decoupled from the &lt;em&gt;command line interface&lt;/em&gt; (cli from now on).&lt;/p&gt;
&lt;p&gt;These are the git commands we are gonna cover:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
add
commit
push
&lt;/pre&gt;
&lt;p&gt;Our file structure will result in something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git-demo
├── git
│   ├── commands
│   │   ├── __init__.py
│   │   ├── add.py
│   │   ├── commit.py
│   │   └── push.py
│   ├── __init__.py
│   └── __main__.py
└── pyproject.toml
&lt;/pre&gt;
&lt;p&gt;If you are gonna write code along with the tutorial, you can create those files already. You can skip the &lt;strong&gt;pyproject.toml&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The code for this tutorial is &lt;cite&gt;hosted in github &amp;lt;https://github.com/Woile/decli-git-demo&amp;gt;&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;Python3! Everything here is python3!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I like the new package manager &lt;code&gt;poetry&lt;/code&gt; which uses the new &lt;strong&gt;pyproject.toml&lt;/strong&gt; file. So let's install:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
poetry add decli
&lt;/pre&gt;
&lt;p&gt;Otherwise if you want to use pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m venv venv
source venv/bin/activate
pip install -U decli
&lt;/pre&gt;
&lt;div class="section" id="the-pyproject-toml-file"&gt;
&lt;h3&gt;The pyproject.toml file&lt;/h3&gt;
&lt;p&gt;If you haven't seen how a &lt;strong&gt;pyproject.toml&lt;/strong&gt; looks, it's something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tool.poetry]
name = "decli-git-demo"
version = "0.1.0"
description = "A git like demo"

[tool.poetry.dependencies]
python = "*"
decli = "^0.5.0"

[tool.poetry.dev-dependencies]
pytest = "^3.0"
flake8 = "^3.5"
mypy = "^0.620.0"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-the-interface"&gt;
&lt;h2&gt;Writing the interface&lt;/h2&gt;
&lt;p&gt;We are gonna write the &lt;strong&gt;cli&lt;/strong&gt; in the &lt;code&gt;__main__.py&lt;/code&gt; file, so we can treat the folder &lt;code&gt;git&lt;/code&gt; as a module.
Look at the file structure if in doubt.&lt;/p&gt;
&lt;p&gt;In order to use it as a module, we need to provide, to the python interpreter, the &lt;code&gt;-m&lt;/code&gt; flag.
Our resulting command would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m git &amp;lt;top_level_arguments&amp;gt; &amp;lt;subcommand&amp;gt; &amp;lt;sub_arguments&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m git --debug commit --amend
&lt;/pre&gt;
&lt;p&gt;For the interface, using &lt;strong&gt;decli&lt;/strong&gt;, we need to create a dict. Let's dive into it.&lt;/p&gt;
&lt;div class="section" id="main-component"&gt;
&lt;h3&gt;Main component&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decli&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-4"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"prog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-5"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"These are common Git commands used in various situations"&lt;/span&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5fefec79ac774e2aba2104632fe0551e-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This part is the entrypoint of our cli.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;prog&lt;/code&gt; key is the name of the app, it will be used in the help information, same as &lt;code&gt;description&lt;/code&gt;.
Let's see how this works:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python -m git --help
usage: git [-h]

These are common Git commands used in various situations

optional arguments:
-h, --help  show this help message and exit
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="arguments"&gt;
&lt;h3&gt;Arguments&lt;/h3&gt;
&lt;p&gt;Let's add some global arguments, we want to have a &lt;code&gt;debug&lt;/code&gt; and a &lt;code&gt;version&lt;/code&gt;.
We are also going to add some code to handle the version flag.
And for now, if nothing is provided we'll print the args.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decli&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-5"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"prog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-6"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"These are common Git commands used in various situations"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-7"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-8"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"-v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--version"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-9"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"--debug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-16"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_bcae518f3f9642189f14fb15bf29fa8f-20"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let's take a look at the help, also to what happens when calling with the &lt;code&gt;version&lt;/code&gt; flag, and when nothing is provided.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python -m git --help
usage: git [-h] [-v] [--debug]

These are common Git commands used in various situations

optional arguments:
-h, --help     show this help message and exit
-v, --version
--debug
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ python -m git --version
0.1.0
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ python -m git
Namespace(debug=False, version=False)
&lt;/pre&gt;
&lt;p&gt;Awesome, this is looking promising.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="subcommands"&gt;
&lt;h3&gt;Subcommands&lt;/h3&gt;
&lt;p&gt;Last thing we are missing are the subcommands, we said we were gonna cover &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, and &lt;code&gt;push&lt;/code&gt;.
Each one will have a unique argument. Each one will use a class that we are gonna implement next. So no output for now.&lt;/p&gt;
&lt;p&gt;Some extras:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We are gonna print the help if nothing is provided&lt;/li&gt;
&lt;li&gt;We are gonna call a &lt;code&gt;run&lt;/code&gt; method from the class that we are gonna define next&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decli&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.commands&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Commit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Push&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-6"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"prog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-7"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"These are common Git commands used in various situations"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-8"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-9"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"-v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--version"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-10"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"--debug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-12"&gt;&lt;/a&gt;    &lt;span class="s2"&gt;"subcommands"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-13"&gt;&lt;/a&gt;        &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-14"&gt;&lt;/a&gt;        &lt;span class="s2"&gt;"commands"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-15"&gt;&lt;/a&gt;            &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-16"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-17"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Add file contents to the index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-18"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"func"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-19"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"--update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-20"&gt;&lt;/a&gt;            &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-21"&gt;&lt;/a&gt;            &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-22"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"commit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-23"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Record changes to the repository"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-24"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"func"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Commit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-25"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-26"&gt;&lt;/a&gt;                    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-27"&gt;&lt;/a&gt;                        &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"--amend"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-28"&gt;&lt;/a&gt;                        &lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-29"&gt;&lt;/a&gt;                        &lt;span class="s2"&gt;"help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-30"&gt;&lt;/a&gt;                            &lt;span class="s2"&gt;"Replace the tip of the current "&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-31"&gt;&lt;/a&gt;                            &lt;span class="s2"&gt;"branch by creating a new commit."&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-32"&gt;&lt;/a&gt;                        &lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-33"&gt;&lt;/a&gt;                    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-34"&gt;&lt;/a&gt;                &lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-35"&gt;&lt;/a&gt;            &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-36"&gt;&lt;/a&gt;            &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-37"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-38"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Update remote refs along with associated objects"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-39"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"func"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-40"&gt;&lt;/a&gt;                &lt;span class="s2"&gt;"arguments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-41"&gt;&lt;/a&gt;                    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-42"&gt;&lt;/a&gt;                        &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"--tags"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-43"&gt;&lt;/a&gt;                        &lt;span class="s2"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-44"&gt;&lt;/a&gt;                        &lt;span class="s2"&gt;"help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-45"&gt;&lt;/a&gt;                            &lt;span class="s2"&gt;"All refs under refs/tags are pushed, in"&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-46"&gt;&lt;/a&gt;                            &lt;span class="s2"&gt;" addition to refspecs explicitly listed "&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-47"&gt;&lt;/a&gt;                            &lt;span class="s2"&gt;"on the command line."&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-48"&gt;&lt;/a&gt;                        &lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-49"&gt;&lt;/a&gt;                    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-50"&gt;&lt;/a&gt;                &lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-51"&gt;&lt;/a&gt;            &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-52"&gt;&lt;/a&gt;        &lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-53"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-54"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-55"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-56"&gt;&lt;/a&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-57"&gt;&lt;/a&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-58"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-59"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-60"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-61"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-62"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-63"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# print help if no arguments are provided&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-64"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-65"&gt;&lt;/a&gt;    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-66"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-67"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-68"&gt;&lt;/a&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1726c55901f41a68a8178e0090ed9ad-69"&gt;&lt;/a&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So this is how &lt;code&gt;__main__.py&lt;/code&gt; should look like.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-the-commands"&gt;
&lt;h2&gt;Writing the commands&lt;/h2&gt;
&lt;p&gt;So before, we left our application unfinished and not working, because it was missing the classes imported from the &lt;code&gt;commands&lt;/code&gt; folder.
If you haven't created the folder and the files yet, go and do it. Remember also to create the &lt;code&gt;__init__.py&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;It's interesting to observe how each class is unpacking the arguments that needs.&lt;/p&gt;
&lt;p&gt;Also, each class is a normal python class, there's nothing needed, really &lt;strong&gt;easy to test&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A better implementation could be made, of course, having a parent class defining the interface and handling global arguments, would be interesting.&lt;/p&gt;
&lt;div class="section" id="add"&gt;
&lt;h3&gt;Add&lt;/h3&gt;
&lt;p&gt;For &lt;code&gt;commands/app.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-4"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;
&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-5"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ce4cf60a793247ed81b64b27a670159a-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'running add... update: {self.update}, debug: {self.debug}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="commit"&gt;
&lt;h3&gt;Commit&lt;/h3&gt;
&lt;p&gt;For &lt;code&gt;commands/commit.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Commit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-4"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;
&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-5"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amend&lt;/span&gt;
&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7488c3d676244cfb93a43c16f1418b1c-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Commiting... debug: {self.debug}, amend: {self.amend}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="push"&gt;
&lt;h3&gt;Push&lt;/h3&gt;
&lt;p&gt;For &lt;code&gt;commands/push.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-4"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;
&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-5"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;
&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_46284de0ccc74be0a4738260af9989cb-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Pushing... debug: {self.debug}, tags: {self.tags}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="init"&gt;
&lt;h3&gt;Init&lt;/h3&gt;
&lt;p&gt;For &lt;code&gt;commands/__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.add&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.commit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Commit&lt;/span&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.push&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Push&lt;/span&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-6"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-7"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Commit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-8"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Push'&lt;/span&gt;
&lt;a name="rest_code_e2203a4ef5b84a2c9939a18c461b1445-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="now-what"&gt;
&lt;h2&gt;Now what?&lt;/h2&gt;
&lt;p&gt;That's it, our application is completed, let's see some output results.&lt;/p&gt;
&lt;div class="section" id="providing-nothing"&gt;
&lt;h3&gt;Providing nothing&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ python -m git
usage: git [-h] [-v] [--debug] {add,commit,push} ...

These are common Git commands used in various situations

optional arguments:
-h, --help         show this help message and exit
-v, --version
--debug

main:
{add,commit,push}
    add              Add file contents to the index
    commit           Record changes to the repository
    push             Update remote refs along with associated objects
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="calling-add-commnand"&gt;
&lt;h3&gt;Calling add commnand&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ python -m git add
running add... update: False, debug: False
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="calling-commit-commnand-with-a-sub-argument"&gt;
&lt;h3&gt;Calling commit commnand with a sub-argument&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ python -m git commit --amend
Commiting... debug: False, amend: True
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="calling-push-commnand-with-global-and-a-sub-arguments"&gt;
&lt;h3&gt;Calling push commnand with global and a sub arguments&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ python -m git --debug push --tags
Pushing... debug: True, tags: True
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="help-for-one-of-the-commands"&gt;
&lt;h3&gt;Help for one of the commands&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
$ python -m git add --help
usage: git add [-h] [--update]

optional arguments:
-h, --help  show this help message and exit
--update
&lt;/pre&gt;
&lt;p&gt;And that's it, we have succesfully created a nice and mantainable cli.&lt;/p&gt;
&lt;p&gt;Also if you already have a project and you want to provide an interface, now you know how.&lt;/p&gt;
&lt;p&gt;Hope it was a useful reading.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git python decli cli</category><guid>https://woile.github.io/posts/creating-a-small-git-like-cli-with-decli/</guid><pubDate>Fri, 14 Sep 2018 17:33:02 GMT</pubDate></item></channel></rss>