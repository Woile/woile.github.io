<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Willy's blog (Posts about python)</title><link>https://woile.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://woile.github.io/categories/python.xml"></atom:link><language>en</language><lastBuildDate>Wed, 16 Aug 2017 10:58:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Guide to Sublime like a normal person</title><link>https://woile.github.io/posts/guide-to-sublime-like-a-normal-person/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;First of all, verify that you have installed the latest version of &lt;a href="https://www.sublimetext.com/3"&gt;Sublime Text 3&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;General settings&lt;/h3&gt;
&lt;p&gt;Add the following settings in &lt;code&gt;Preferences &amp;gt; Settings &amp;gt; User Tab&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;"trim_trailing_white_space_on_save": true,
"auto_complete": false,
"translate_tabs_to_spaces": true,
"word_wrap": "false",
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;trim_trailing_white_space_on_save&lt;/code&gt; deletes the trailing spaces. This is useful to select text properly and sometimes is required by many languages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auto_complete&lt;/code&gt; improves sublime's performance. If the project is huge sublime will get slow while
this feature is on by default, having to look up for everything you write. Autocomplete still will be triggered if you press &lt;code&gt;tab&lt;/code&gt; while writing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;translate_tabs_to_spaces&lt;/code&gt; forces to always use spaces when tabbing. This is a personal choice, you can
use either &lt;code&gt;tabs&lt;/code&gt; or &lt;code&gt;spaces&lt;/code&gt;, but be consistent with the one you or your team use.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;word_wrap&lt;/code&gt; if set to false, helps avoiding problems when using features like multiline select.&lt;/p&gt;
&lt;h3&gt;Installing packages&lt;/h3&gt;
&lt;p&gt;Install the &lt;a href="https://packagecontrol.io/installation"&gt;package control&lt;/a&gt; as explained there.&lt;/p&gt;
&lt;p&gt;To use it go to &lt;code&gt;Tools &amp;gt; Command Palette&lt;/code&gt; or by default the shortcut keys are:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Linux: `ctrl+shit+P`
Os X: `cmd+shift+p`
&lt;/pre&gt;


&lt;p&gt;Finally, the steps to install a new package are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select the option: &lt;code&gt;Package Control: install package&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wait until the packages are loaded.&lt;/li&gt;
&lt;li&gt;Write the name of the package you want to install.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Linters&lt;/h3&gt;
&lt;p&gt;A lint tool performs static analysis of source code and flags patterns that might have errors or otherwise cause problems for the developer.
In other words, it tells you where you are writing incorrect code.
Usually, a linter is a software that receives the files to analyze as paramters, and the will give you an output indicating in which lines somethings is weird.&lt;/p&gt;
&lt;h3&gt;Sublime Linter&lt;/h3&gt;
&lt;p&gt;In my opinion, this is the &lt;strong&gt;most important package&lt;/strong&gt; everyone should install, it provides an interface to communicate with the linters, and the errors will be displayed in the editor in an elegant manner.
This means that Sublime Linter will talk with the linter you have installed in your system globally, and will display in the editor the errors reported by the linter.&lt;/p&gt;
&lt;p&gt;As the site reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SublimeLinter is a plugin for Sublime Text 3 that provides a framework for linting code. Whatever language you code in, SublimeLinter can help you write cleaner, better, more bug-free code. SublimeLinter has been designed to provide maximum flexibility and usability for users and maximum simplicity for linter authors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The concept behind it is very simple:
    1. Install globally in your system a linter for the language of your choice (pep8, eslint, csslint, rubocop, etc).
    2. Install the corresponding sublime linter through the &lt;strong&gt;package control&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Useful linters&lt;/h4&gt;
&lt;p&gt;Choose the one that suits you more, and install it through the package manager of the corresponding language. Eg: pip for python, gem for ruby, etc.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th align="center"&gt;Linter&lt;/th&gt;
&lt;th align="center"&gt;Sublime package name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;python&lt;/td&gt;
&lt;td align="center"&gt;pep8&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-pep8&lt;/td&gt;
&lt;td&gt;tool to check your Python code against some of the style conventions in PEP 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python&lt;/td&gt;
&lt;td align="center"&gt;pep257&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-pep257&lt;/td&gt;
&lt;td&gt;static analysis tool for checking compliance with Python docstring conventions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python&lt;/td&gt;
&lt;td align="center"&gt;pyflakes&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-pyflakes&lt;/td&gt;
&lt;td&gt;checks Python source files for errors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python&lt;/td&gt;
&lt;td align="center"&gt;flake8&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-flake8&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;[recommended]&lt;/strong&gt; includes lint checks provided by the PyFlakes project, PEP-0008 inspired style checks provided by the PyCodeStyle project, and McCabe complexity checking provided by the McCabe project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;javascript&lt;/td&gt;
&lt;td align="center"&gt;jshint&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-jshint&lt;/td&gt;
&lt;td&gt;JSHint is a program that flags suspicious usage in programs written in JavaScript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;javascript&lt;/td&gt;
&lt;td align="center"&gt;eslint&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-eslint&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;[recommended]&lt;/strong&gt; tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;css&lt;/td&gt;
&lt;td align="center"&gt;csslint&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-csslint&lt;/td&gt;
&lt;td&gt;open source CSS code quality tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sass&lt;/td&gt;
&lt;td align="center"&gt;sass-lint&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-contrib-sass-lint&lt;/td&gt;
&lt;td&gt;A Node-only Sass linter for both sass and scss syntax!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ruby&lt;/td&gt;
&lt;td align="center"&gt;rubocop&lt;/td&gt;
&lt;td align="center"&gt;SublimeLinter-rubocop&lt;/td&gt;
&lt;td&gt;A Ruby static code analyzer, based on the community Ruby style guide.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;golang&lt;/td&gt;
&lt;td align="center"&gt;golint&lt;/td&gt;
&lt;td align="center"&gt;Sublimeâ€‹Linter-contrib-golint&lt;/td&gt;
&lt;td&gt;Golint is a linter for Go source code.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: I work with python and javascript so I've marked those which I consider good for those languages.&lt;/p&gt;
&lt;h4&gt;Tips to configure sublime linter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If your sublime linter user settings are empty, copy the default ones, because if you overwrite the default, everytime SL is updated, the settings will be reseted.&lt;/li&gt;
&lt;li&gt;After installing a custom language that wraps another language, link it in sublimelinter, so the linter still works. For example, for python/django put in your sublime linter settigns:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;"syntax_map": {
    "python (django)": "python",
    "python django": "python"
}
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;To change the mark style, open the package control and type &lt;strong&gt;Choose Mark Style&lt;/strong&gt;, I like the Squiggly underline.&lt;/li&gt;
&lt;li&gt;You can ignore rules, in the settings of the linter inside the sublime linter settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Another useful Packages&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DockBlockr&lt;/code&gt; Helps commenting (go to the web for more information)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Colorhighlighter&lt;/code&gt; Highlights hexa colors, useful for CSS&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SidebarEnhancements&lt;/code&gt; Allows options as move, copy, remove, etc in the side bar&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Emmet&lt;/code&gt; Write HTML faster, introduces many sweet snippets.&lt;/p&gt;
&lt;h3&gt;MUST KNOW SHORTCUTS&lt;/h3&gt;
&lt;p&gt;Using this shortcuts will make your life much easier.&lt;/p&gt;
&lt;p&gt;Search them in your key bindin settings, and observe the keys.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toggle_comment&lt;/code&gt; usually &lt;code&gt;Ctrl + /&lt;/code&gt;
&lt;img alt="" src="https://woile.github.io/images/guide-to-sublime-like-a-normal-person/toggle_comment.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select_lines&lt;/code&gt; usualy by pressing &lt;code&gt;Ctrl&lt;/code&gt; and click
&lt;img alt="" src="https://woile.github.io/images/guide-to-sublime-like-a-normal-person/select_lines.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find_under_expand&lt;/code&gt; to filter with case, open the search panel and enable the "Case Sensitive" option.&lt;/p&gt;
&lt;p&gt;No image for this sorry.&lt;/p&gt;
&lt;h3&gt;RECOMMENDED THEME&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Miw0/SoDaReloaded-Theme"&gt;SoDaReloaded-Theme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This awesome theme also includes cool icons for every extension, like in the image below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/Miw0/sodareloaded-theme/master/dark/example.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>linters</category><category>programming</category><category>python</category><category>sublime</category><guid>https://woile.github.io/posts/guide-to-sublime-like-a-normal-person/</guid><pubDate>Thu, 08 Jun 2017 19:46:15 GMT</pubDate></item><item><title>How to filter Polymorphic Models with Django Filters</title><link>https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;As the title says, I needed a way to filter my polymorphic models using my already defined
&lt;code&gt;rest_framework.FilterSet&lt;/code&gt;, and as I didn't find much resources about it I'm sharing my experience here.&lt;/p&gt;
&lt;p&gt;First, let's talk about &lt;code&gt;django-polymorphic&lt;/code&gt; and &lt;code&gt;django-filters&lt;/code&gt;, what are these libraries for.&lt;/p&gt;
&lt;div class="section" id="django-polymorphic"&gt;
&lt;h2&gt;Django-polymorphic &lt;a class="footnote-reference" href="https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/#id3" id="id1"&gt;[1]&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
Simplifies using inherited models in Django projects. When a query is made at the base
model, the inherited model classes are returned.
&lt;/pre&gt;
&lt;p&gt;One of the most important things to understand of polymorphic is, that when you ask for the queryset of the parent, every element is represented with its children classes. Let's see this.&lt;/p&gt;
&lt;p&gt;I'll use the models examples provided by the &lt;a class="reference external" href="https://django-polymorphic.readthedocs.io/en/stable/"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;polymorphic.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PolymorphicModel&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PolymorphicModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;start_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;finish_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArtProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResearchProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_fefc62c54e164975a69d214dc53e0da2-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;supervisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_405998d031ca4f51a0c0d7f692b7c38a-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Department Party"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_405998d031ca4f51a0c0d7f692b7c38a-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ArtProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Painting with Tim"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"T. Turner"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_405998d031ca4f51a0c0d7f692b7c38a-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ResearchProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Swallow Aerodynamics"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;supervisor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Dr. Winter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_edb4fddba69147b399a80bbcec9ce549-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_edb4fddba69147b399a80bbcec9ce549-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="s2"&gt;"Department Party"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_edb4fddba69147b399a80bbcec9ce549-3"&gt;&lt;/a&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ArtProject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="s2"&gt;"Painting with Tim"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="s2"&gt;"T. Turner"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_edb4fddba69147b399a80bbcec9ce549-4"&gt;&lt;/a&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResearchProject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="s2"&gt;"Swallow Aerodynamics"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;supervisor&lt;/span&gt; &lt;span class="s2"&gt;"Dr. Winter"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;As you can see, this can be really helpful when using Django Rest Framework (DRF) and model inheritance.
It allows to use just one model, in this case &lt;code&gt;Project&lt;/code&gt;, in a &lt;code&gt;ModelViewSet&lt;/code&gt; and you will receive all the instances for &lt;code&gt;Project&lt;/code&gt;, &lt;code&gt;ArtProject&lt;/code&gt; and &lt;code&gt;ResearchProject&lt;/code&gt;. Take into account
that your serializer will have to handle the representation of each of the models.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-filter"&gt;
&lt;h2&gt;Django-filter &lt;a class="footnote-reference" href="https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/#id4" id="id2"&gt;[2]&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
Is a generic, reusable application to alleviate writing some of the more mundane bits of view code. Specifically, it allows users to filter down a queryset based on a modelâ€™s fields.
&lt;/pre&gt;
&lt;p&gt;Fundamentally, when using django filters you'll want to create a class specifying the model's
fields by which a queryset can be filtered.&lt;/p&gt;
&lt;p&gt;Let's modified a bit the example of the &lt;a class="reference external" href="https://django-filter.readthedocs.io/en/latest/guide/usage.html"&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django_filters&lt;/span&gt;
&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProjectFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;django_filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilterSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lookup_expr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'iexact'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;
&lt;a name="rest_code_bad88f2c9dee4e18ade9621443d94ac9-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'start_date'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'finish_date'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And the view should look something like:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_00b8b09cde0342999679ffe185bd1944-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;project_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_00b8b09cde0342999679ffe185bd1944-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProjectFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_00b8b09cde0342999679ffe185bd1944-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'my_app/template.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'filter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Obviously, this will help reduce the amount of code written, and will be way easier to mantain.
The good thing about this library, and what matters to me the most, is that it has a great &lt;a class="reference external" href="https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html"&gt;integration with DRF&lt;/a&gt; by providing a DRF-specific FilterSet and a filter backend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filtering-by-a-polymorphic-model"&gt;
&lt;h2&gt;Filtering by a polymorphic model&lt;/h2&gt;
&lt;p&gt;As we stated at the beginning what I wanted to do is filter by a &lt;strong&gt;polymorphic model&lt;/strong&gt;, because we have different types of projects. This can be easily achieved by reading the docs, no seriously, by essentially using the &lt;code&gt;rest_framework.FilterSet&lt;/code&gt; and using a customized filter with &lt;a class="reference external" href="https://django-filter.readthedocs.io/en/latest/guide/usage.html#customize-filtering-with-filter-method"&gt;Filter.method&lt;/a&gt; in our FilterSet.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django_filters&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_subclasses_as_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;subclass&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-6"&gt;&lt;/a&gt;               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;subclass&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProjectFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;django_filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest_framework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilterSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;project_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultipleChoiceFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'project_type_filter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_subclasses_as_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'topic'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'start_date'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'end_date'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;project_type_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;project_choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_subclasses_as_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;selected_projects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;project_choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-21"&gt;&lt;/a&gt;                             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_7c7e86883c0e4f94bc97089e9a876225-22"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;selected_projects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now, if our querystring includes a key &lt;code&gt;project_type&lt;/code&gt;, it will check if the values match any of
the choices and it will return the queryset filtered by the specified choices.
And that's it, we have successfully filtered polymorphic models. Now we just need to add &lt;code&gt;ProjectFilter&lt;/code&gt; to the &lt;code&gt;filter_class&lt;/code&gt; in the &lt;code&gt;viewsets.ModelViewSet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/django-polymorphic/django-polymorphic"&gt;https://github.com/django-polymorphic/django-polymorphic&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/carltongibson/django-filter"&gt;https://github.com/carltongibson/django-filter&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>api</category><category>django</category><category>django-rest-framework</category><category>drf</category><category>filters</category><category>polymorphic</category><category>python</category><guid>https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/</guid><pubDate>Thu, 02 Mar 2017 23:58:22 GMT</pubDate></item></channel></rss>