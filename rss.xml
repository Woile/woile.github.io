<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Willy's blog</title><link>https://woile.github.io/</link><description>Software Engineer, Python dev</description><atom:link href="https://woile.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 19 Apr 2019 07:54:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Sharing passwords using gopass, git and gpg</title><link>https://woile.github.io/posts/sharing-team-secrets/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tired of storing your passwords in unreliable but convenient places?&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tired of sharing password across unreliable platforms? slack, notes, etc&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tired of having your team passwords in no specific place?&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you have answer to any of this questions with a yes, then you might find&lt;/div&gt;
&lt;div class="line"&gt;this post quite useful. If your answer was no, read it anyway, you are&lt;/div&gt;
&lt;div class="line"&gt;already here.&lt;/div&gt;
&lt;/div&gt;
&lt;img src="https://media.giphy.com/media/5VKbvrjxpVJCM/giphy.gif"&gt;&lt;p&gt;&lt;a href="https://woile.github.io/posts/sharing-team-secrets/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>encryption</category><category>gpg</category><category>password manager</category><category>security</category><guid>https://woile.github.io/posts/sharing-team-secrets/</guid><pubDate>Mon, 18 Mar 2019 16:34:36 GMT</pubDate></item><item><title>Raspberry Pi hobby cluster</title><link>https://woile.github.io/posts/raspberries-hobby-cluster/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;In this tutorial we are gonna try to setup a cluster in our home
server built with raspberries.&lt;/p&gt;
&lt;p&gt;In another post I'll describe how to configure a Kubernetes cluster in our raspberries.&lt;/p&gt;
&lt;p&gt;Kubernetes is a container orchestration tool, it can do all of this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Automatic bin packing&lt;/li&gt;
&lt;li&gt;Self-healing&lt;/li&gt;
&lt;li&gt;Horizontal scaling&lt;/li&gt;
&lt;li&gt;Service discovery and Load balancing&lt;/li&gt;
&lt;li&gt;Automated rollouts and rollbacks&lt;/li&gt;
&lt;li&gt;Secrets and configuration management&lt;/li&gt;
&lt;li&gt;Storage orchestration&lt;/li&gt;
&lt;li&gt;Long running jobs&lt;/li&gt;
&lt;li&gt;Batch execution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/raspberries-hobby-cluster/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cluster</category><category>docker</category><category>kubernetes</category><category>raspberry</category><guid>https://woile.github.io/posts/raspberries-hobby-cluster/</guid><pubDate>Fri, 22 Feb 2019 07:46:17 GMT</pubDate></item><item><title>Moving from docker alpine to slim</title><link>https://woile.github.io/posts/moving-from-docker-alpine-to-slim/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been running a docker python3.x image for a long time.
I've used the base version, the slim and the alpine.&lt;/p&gt;
&lt;p&gt;Initially I moved from the base python3.6 to the python3.6-slim and everything
went great. The main win was that no change was required in the Dockerfile,
it was smaller and more secure (less dependencies, more security, right?)&lt;/p&gt;
&lt;p&gt;After a while, I decided to move from slim to alpine, because of the size benefit.
While doing the migration I found these drawbacks:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Renaming dependencies&lt;/strong&gt;. I had to convert from &lt;code&gt;apt&lt;/code&gt; to &lt;code&gt;apk&lt;/code&gt; for every dependency.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Working with edge&lt;/strong&gt;. There's always a problem with the edge repository.
Sometimes it's down. Sometimes the packages are broken.
You have to dig a lot in order to have a proper configuration.
Like using &lt;code&gt;--no-cache&lt;/code&gt; flag in apk. Or setting up the edge repo, then having to upgrade &lt;code&gt;apk-tools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This kind of problems break our pipeline when there's no new commit. And I don't want this.
That's why I've decided to move back to &lt;code&gt;slim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Don't get me wrong, alpine is great, small and secure, and if you don't have many edge dependencies,
I guess it'll work flawlessly, and I would totally use it.
But our image unfortunately has dependencies like postgis, and proj4, which fail a lot in alpine.&lt;/p&gt;
&lt;p&gt;But my story is not over with alpine, I'll try it again in the future.
I know with time it will get better and better, and I'll understand it more and more.&lt;/p&gt;&lt;/div&gt;</description><category>linux python containers alpine slim debian</category><guid>https://woile.github.io/posts/moving-from-docker-alpine-to-slim/</guid><pubDate>Sun, 13 Jan 2019 15:34:43 GMT</pubDate></item><item><title>Local HTTPS development in Python with Mkcert</title><link>https://woile.github.io/posts/local-https-development-in-python-with-mkcert/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;div class="contents local topic" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#about-mkcert" id="id5"&gt;About mkcert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#configuring-mkcert" id="id6"&gt;Configuring mkcert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#python-frameworks" id="id7"&gt;Python frameworks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#uvicorn-starlette" id="id8"&gt;Uvicorn + Starlette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#django-ssl-server" id="id9"&gt;Django SSL Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#flask" id="id10"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#gunicorn" id="id11"&gt;Gunicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#uwsgi" id="id12"&gt;UWSGI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#security-concerns" id="id13"&gt;Security concerns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#conclusion" id="id14"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="about-mkcert"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/#id5"&gt;About mkcert&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/FiloSottile/mkcert/"&gt;mkcert&lt;/a&gt; allows you to have a local
certificate authority (CA).
This means that you can run your development web server using HTTPS.
You'll see the green lock in your browser.&lt;/p&gt;
&lt;img src="https://woile.github.io/images/local-https-development-in-python-with-mkcert/https.png"&gt;&lt;p&gt;You might not need it most of the time, but more and more features require
HTTPS by default in the browser, like web bluetooth, service workers, web authentication
and websockets in some cases where SSL is already enabled.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/local-https-development-in-python-with-mkcert/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>web frameworks development security https</category><guid>https://woile.github.io/posts/local-https-development-in-python-with-mkcert/</guid><pubDate>Thu, 10 Jan 2019 17:30:24 GMT</pubDate></item><item><title>Websockets RFC summary</title><link>https://woile.github.io/posts/websockets-rfc-summary/</link><dc:creator>Woile</dc:creator><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tools.ietf.org/html/rfc6455.html"&gt;RFC Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For bi-directional communication (e.g., instant messaging and gaming applications): abuse of &lt;strong&gt;HTTP poll&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/websockets-rfc-summary/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>rfc summary websockets</category><guid>https://woile.github.io/posts/websockets-rfc-summary/</guid><pubDate>Fri, 28 Sep 2018 17:16:24 GMT</pubDate></item><item><title>Tutorial: writing my dreamt cli using decli</title><link>https://woile.github.io/posts/creating-a-small-git-like-cli-with-decli/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;So for a long time I've been using different cli tools, mostly &lt;code&gt;argparse&lt;/code&gt; because this way I had zero dependencies,
less worries, this is pure personal preference.&lt;/p&gt;
&lt;p&gt;Other tools such as click or docopt, the way the code must be written, is not something I'm really fond of.&lt;/p&gt;
&lt;p&gt;Because of this, I created &lt;a class="reference external" href="https://github.com/Woile/decli"&gt;decli&lt;/a&gt;, which is a declarative command line utility. Super simple.
Which is basically a wrapper around argparse.
Just write a dict and you are ready to go.&lt;/p&gt;
&lt;p&gt;In this tutorial we are gonna try to simulate a &lt;em&gt;git command line tool&lt;/em&gt;.
Let's create a few commands which will just print a message.&lt;/p&gt;
&lt;p&gt;But we are gonna structure the code, the way I always wanted to hehe.&lt;/p&gt;
&lt;p&gt;The commands will be decoupled from the &lt;em&gt;command line interface&lt;/em&gt; (cli from now on).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/creating-a-small-git-like-cli-with-decli/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git python decli cli tutorial programming</category><guid>https://woile.github.io/posts/creating-a-small-git-like-cli-with-decli/</guid><pubDate>Fri, 14 Sep 2018 17:33:02 GMT</pubDate></item><item><title>Decrypt filesystem</title><link>https://woile.github.io/posts/decrypt-filesystem/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;h2&gt;Decrypt ubuntu filesystem&lt;/h2&gt;
&lt;p&gt;If you have encrypted your drive with one of the latest ubuntu version, this is how to decrypt using the command line.&lt;/p&gt;
&lt;p&gt;A few weeks ago I had a problem with my ubuntu (as usual) and I had no clue how to decrypt my file, which it's encrypted by my company's policy.&lt;/p&gt;
&lt;p&gt;Optional: run a &lt;strong&gt;live ubuntu&lt;/strong&gt; if your system is not working properly&lt;/p&gt;
&lt;h3&gt;First option&lt;/h3&gt;
&lt;p&gt;Open a terminal and type &lt;code&gt;sudo ecryptfs-unwrap-passphrase&lt;/code&gt;. Most of the time this should do it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/decrypt-filesystem/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>encrypt</category><category>linux</category><category>ubuntu</category><guid>https://woile.github.io/posts/decrypt-filesystem/</guid><pubDate>Fri, 13 Jul 2018 21:14:43 GMT</pubDate></item><item><title>How to test Selenium scrapper with Python</title><link>https://woile.github.io/posts/how-to-test-selenium-scrapper/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;This week I've been writing tests for &lt;a class="reference external" href="https://github.com/discov-r/pyinstamation"&gt;a project&lt;/a&gt; which is
using Selenium as a scrapper.&lt;/p&gt;
&lt;p&gt;As you may know, Selenium is a testing framework, it's intended to be used while writing tests,
not as a web crawler/scrapper.&lt;/p&gt;
&lt;p&gt;But you can. Why? Because it runs a browser, and the browser is the real sh*t, so the Javascript
gets executed, and we are happy. There are other solutions like &lt;a class="reference external" href="https://github.com/makinacorpus/spynner"&gt;Spynner&lt;/a&gt;
or writing the scrapper in pure Javascript, but I felt comfortable using Selenium this way.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;How do we &lt;strong&gt;test&lt;/strong&gt; this scrapper? I want it to have tests, damn!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Save the static content while running the scrapper, then, serve it with a very small http server
while testing. Yes, it's a bit tedious, but it delivers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/how-to-test-selenium-scrapper/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>selenium python testing</category><guid>https://woile.github.io/posts/how-to-test-selenium-scrapper/</guid><pubDate>Tue, 12 Sep 2017 14:38:40 GMT</pubDate></item><item><title>Guide to Sublime like a normal person</title><link>https://woile.github.io/posts/guide-to-sublime-like-a-normal-person/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;First of all, verify that you have installed the
latest version of &lt;a href="https://www.sublimetext.com/3"&gt;Sublime Text 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/guide-to-sublime-like-a-normal-person/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linters</category><category>programming</category><category>python</category><category>sublime</category><guid>https://woile.github.io/posts/guide-to-sublime-like-a-normal-person/</guid><pubDate>Thu, 08 Jun 2017 19:46:15 GMT</pubDate></item><item><title>How to filter Polymorphic Models with Django Filters</title><link>https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/</link><dc:creator>Woile</dc:creator><description>&lt;div&gt;&lt;p&gt;As the title says, I needed a way to filter my polymorphic models using my already defined
&lt;code&gt;rest_framework.FilterSet&lt;/code&gt;, and as I didn't find much resources about it I'm sharing my experience here.&lt;/p&gt;
&lt;p&gt;First, let's talk about &lt;code&gt;django-polymorphic&lt;/code&gt; and &lt;code&gt;django-filters&lt;/code&gt;, what are these libraries for.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>api</category><category>django</category><category>django-rest-framework</category><category>drf</category><category>filters</category><category>polymorphic</category><category>python</category><guid>https://woile.github.io/posts/django-polymorphic-integration-with-django-filters/</guid><pubDate>Thu, 02 Mar 2017 23:58:22 GMT</pubDate></item></channel></rss>